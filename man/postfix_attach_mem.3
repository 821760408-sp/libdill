.\" Automatically generated by Pandoc 1.19.2.1
.\"
.TH "POSTFIX_ATTACH_MEM" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
postfix_attach_mem \- creates POSTFIX protocol on top of underlying
socket
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ postfix_attach_mem(
\ \ \ \ int\ s,
\ \ \ \ struct\ postfix_storage*\ mem);
\f[]
.fi
.SH DESCRIPTION
.PP
POSTFIX is a message\-based protocol that delimits messages usign CR+LF
byte sequence (0x0D 0x0A).
In other words, it\[aq]s a protocol to send text messages separated by
newlines.
The protocol has no initial handshake.
Terminal handshake is accomplished by each peer sending an empty line.
.PP
This function instantiates POSTFIX protocol on top of the underlying
protocol.
.PP
This function allows to avoid one dynamic memory allocation by storing
the object in user\-supplied memory.
Unless you are hyper\-optimizing use \f[B]postfix_attach\f[] instead.
.PP
\f[B]s\f[]: Handle of the underlying socket.
It must be a bytestream protocol.
.PP
\f[B]mem\f[]: The structure to store the newly created object in.
It must not be deallocated before the object is closed.
.PP
The socket can be cleanly shut down using \f[B]postfix_detach\f[]
function.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns newly created socket handle.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EBADF\f[]: Invalid handle.
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.IP \[bu] 2
\f[B]ENOTSUP\f[]: The handle does not support this operation.
.IP \[bu] 2
\f[B]EPROTO\f[]: Underlying socket is not a bytestream socket.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ s\ =\ tcp_connect(&addr,\ \-1);
s\ =\ postfix_attach(s);
msend(s,\ "ABC",\ 3,\ \-1);
char\ buf[256];
ssize_t\ sz\ =\ mrecv(s,\ buf,\ sizeof(buf),\ \-1);
s\ =\ postfix_detach(s,\ \-1);
tcp_close(s);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]hclose\f[](3) \f[B]mrecv\f[](3) \f[B]mrecvl\f[](3)
\f[B]msend\f[](3) \f[B]msendl\f[](3) \f[B]postfix_attach\f[](3)
\f[B]postfix_detach\f[](3)
